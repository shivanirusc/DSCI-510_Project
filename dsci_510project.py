# -*- coding: utf-8 -*-
"""DSCI-510Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O_7W-xzIi70vQQiTtIHEE1K-ZIF4RAd6
"""

import streamlit as st
import pandas as pd

# Load the recipe data
recipe_data = pd.read_csv("updated_recipe_data.csv")

# Define a function to filter recipes based on user inputs
def filter_recipes(recipe_data, ingredients, diet_choices, user_preferences, dietary_restrictions):
    filtered_data = recipe_data.copy()

    # Filter based on ingredients
    for ingredient in ingredients:
        if ingredient:
            filtered_data = filtered_data[filtered_data["Ingredients"].str.contains(ingredient, case=False)]

    # Filter based on diet choices
    if "Vegetarian" in diet_choices:
        filtered_data = filtered_data[filtered_data["Recipe Category"] == "Vegetarian"]
    if "Non-Vegetarian" in diet_choices:
        filtered_data = filtered_data[filtered_data["Recipe Category"] == "Non Vegetarian"]
    if "Vegan" in diet_choices:
        filtered_data = filtered_data[filtered_data["Recipe Category"] == "Vegan"]

    # Filter based on user preferences
    if "High Blood Pressure" in user_preferences:
        filtered_data = filtered_data[filtered_data["Sodium"] < 150]  # Adjust threshold as needed
    if "Diabetes" in user_preferences:
        filtered_data = filtered_data[filtered_data["Total Carbohydrate"] < 30]  # Adjust threshold as needed

    # Filter based on dietary restrictions
    if dietary_restrictions:
        for restriction in dietary_restrictions.split(","):
            filtered_data = filtered_data[~filtered_data["Ingredients"].str.contains(restriction.strip(), case=False)]

    return filtered_data

# Streamlit app
st.sidebar.title("Filter Options")

# Create a text input for ingredient names
ingredient_names_input = st.sidebar.text_input("Enter Ingredient Names (comma-separated)")

# Split the input into individual ingredient names
ingredient_names = [name.strip() for name in ingredient_names_input.split(",")]

# Create a multiselect widget with the ingredient names as options
selected_ingredients = st.sidebar.multiselect("Select Ingredients", ingredient_names)

# Remove any empty strings from the selected ingredients
selected_ingredients = [ingredient for ingredient in selected_ingredients if ingredient]

# Filter recipes based on selected ingredients
if selected_ingredients:
    filtered_recipes = filtered_recipes[filtered_recipes["Ingredients"].apply(lambda x: any(ingredient in x for ingredient in selected_ingredients))]

# Multiselect for vegetarian, non-vegetarian, or vegan
diet_choices = st.sidebar.multiselect("Choose Diet", ["Choose", "Vegetarian", "Non-Vegetarian", "Vegan"], default=["Choose"])

# Multiselect for user preferences
user_preferences = st.sidebar.multiselect("User Preferences", ["High Blood Pressure", "Diabetes", "Normal"])

# Text box for dietary restrictions
dietary_restrictions = st.sidebar.text_input("Dietary Restrictions")

# Filter the data based on user inputs
filtered_recipes = filter_recipes(recipe_data, ingredients, diet_choices, user_preferences, dietary_restrictions)

# Display filtered recipes
if st.sidebar.button("Submit"):
    st.write("### Recommended Recipes")
    st.write(filtered_recipes)
else:
    st.write(recipe_data)
